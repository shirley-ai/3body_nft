// SPDX-License-Identifier: MIT


pragma solidity >=0.7.0 <0.9.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./Base64.sol";

contract OnChainNft is ERC721Enumerable, Ownable {
  using Strings for uint256;

  constructor() ERC721("On Chain Trisolaris", "3body") {}
  struct Parameter {
    string name;
    string description;
    string bgHue;
    string starHue;
    //string planetHue;
    string star1CX;
    string star1CY;
    string star2CX;
    string star2CY;
    string star3CX;
    string star3CY;
    string planetCX;
    string planetCY;
  }

  mapping (uint256 => Parameter) public Parameters;

  // public
  function mint() public payable {
    uint256 supply = totalSupply();
   
    require(supply + 1 <= 10000);

    Parameter memory para = Parameter(
      string(abi.encodePacked('3body #', uint256(supply+1).toString())),
      "On_Chain Trisolaris System Snapshot",
      randomNum(361, block.difficulty, supply).toString(),
      randomNum(361, block.timestamp, supply).toString(),
      //randomNum(361, block.difficulty, supply).toString(),
      randomNum(501, block.difficulty, supply).toString(),
      randomNum(501, block.timestamp, supply).toString(),
      randomNum(501, block.difficulty, supply).toString(),
      randomNum(501, block.timestamp, supply).toString(),
      randomNum(501, block.difficulty, supply).toString(),
      randomNum(501, block.timestamp, supply).toString(),
      randomNum(501, block.difficulty, supply).toString(),
      randomNum(501, block.timestamp, supply).toString()
    );

    if (msg.sender != owner()) {
      require(msg.value >= 0.005 ether);
    }

    Parameters[supply+1] = para;

  
    _safeMint(msg.sender, supply + 1);
    
  }

  function randomNum(uint256 _mod, uint256 _seed, uint256 _salt) public view returns(uint256){
    uint256 num = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, _seed, _salt))) % _mod;
    return num;
  }






  function buildImage(uint256 _tokenId) public view returns(string memory){
    Parameter memory CurrentPara = Parameters[_tokenId];
     return Base64.encode(bytes(abi.encodePacked(
         '<svg width="500" height="500" xmlns="http://www.w3.org/2000/svg">',
         '<rect height="500" width="500" y="0" x="0" fill="hsl(',CurrentPara.bgHue,',50%,25%)"/>',
         '<ellipse filter="url(#svg_2_blur)" ry="14" rx="13.5" cy="',CurrentPara.star1CY,'" cx="',CurrentPara.star1CX,'" fill="hsl(',CurrentPara.starHue,',100%,50%)"/>',
         '<ellipse filter="url(#svg_2_blur)" ry="14" rx="13.5" cy="',CurrentPara.star2CY,'" cx="',CurrentPara.star2CX,'" fill="hsl(',CurrentPara.starHue,',100%,50%)"/>',
         '<ellipse filter="url(#svg_2_blur)" ry="14" rx="13.5" cy="',CurrentPara.star3CY,'" cx="',CurrentPara.star3CX,'" fill="hsl(',CurrentPara.starHue,',100%,50%)"/>',
         '<ellipse filter="url(#svg_5_blur)" ry="3" rx="3" cy="',CurrentPara.planetCY,'" cx="',CurrentPara.planetCX,'" fill="hsl(37,100%,80%)"/>',
         '<defs>',
         '<filter height="200%" width="200%" y="-50%" x="-50%" id="svg_2_blur">',
         '<feGaussianBlur stdDeviation="5" in="SourceGraphic"/>',
         '</filter>',
         '<filter id="svg_5_blur">',
         '<feGaussianBlur stdDeviation="1" in="SourceGraphic"/>',
         '</filter>',
         '</defs>',
         '</svg>'
     ))); 
  }


  function tokenURI(uint256 _tokenId)
    public
    view
    virtual
    override
    returns (string memory)
  {
    require(
      _exists(_tokenId),
      "ERC721Metadata: URI query for nonexistent token"
    );
    Parameter memory CurrentPara = Parameters[_tokenId];

    return string(abi.encodePacked(
        'data:application/json;base64,',Base64.encode(bytes(abi.encodePacked(
            '{"name":"',
            CurrentPara.name,
            '", "decription":"',
            CurrentPara.description,
            '", "image": "',
            'data:image/svg+xml;base64,',
            buildImage(_tokenId),
            '"}')))));
    

  }

  //only owner


 
  function withdraw() public payable onlyOwner {

    (bool os, ) = payable(owner()).call{value: address(this).balance}("");
    require(os);
    // =============================================================================
  }
}
